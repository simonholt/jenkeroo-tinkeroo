<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>image_name</name>
          <description>The docker image name to promote</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>from_region</name>
          <description>AWS region to pull the docker image from</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>to_region</name>
          <description>The region the docker image needs pushing to</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2633.v6baeedc13805">
    <script>//This script expects a credential called aws-key to exist in Jenkins
node {

  setVariables()

  stage('Pull and Tag Docker Image') {
    withAWS(credentials:'aws-key', region: "${env.from_region}") {

        println "Pulling image registry: ${pullImage}"
        docker.withRegistry("https://${fromRegistry}", "ecr:${env.from_region}:aws-key") {
            sh "docker image pull ${pullImage}"
            sh "docker image tag ${pullImage} ${pushImage}"
        }

    }
  }

  stage('Push Docker Image') {

    withAWS(credentials:'aws-key', region: "${env.to_region}") {

        println "Pushing image: ${pushImage}"

        docker.withRegistry("https://${toRegistry}", "ecr:${env.to_region}:aws-key") {
            sh "docker image push ${pushImage}"
        }
    }
  }
}

def setVariables(){

    fromRegistry = "032356282346.dkr.ecr.${env.from_region}.amazonaws.com"
    toRegistry = "032356282346.dkr.ecr.${env.to_region}.amazonaws.com"

    imageName = env.image_name.split('/')[1]
    pullImage = "${env.image_name}"
    pushImage = "${toRegistry}/${imageName}"
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>