<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.41">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>test pipeline to get ECR image</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2648.va9433432b33c">
    <script>node {

  setVariables()

    stage('Pull DEV Docker Image') {
        withAWS(region: 'eu-west-1', role:'ToolsSpinnakerManagedRole', roleAccount:'992548356091', duration: 900, roleSessionName: 'jenkins-session') {
            docker.withRegistry("https://${registry}", "ecr:eu-west-1:aws-key"){
                sh ecrLogin(registryIds: ['992548356091'])
                docker.image('auditlogas:0.0.70-dummy-1').pull()
            }
        }
    }
}

def setVariables(){
    fullImageLink = "992548356091.dkr.ecr.eu-west-1.amazonaws.com/auditlogas:0.0.70-dummy-1"
    registry = fullImageLink.split('/')[0]
    imageName = fullImageLink.split(':')[0].split('/')[1]
    imageTag = fullImageLink.split(':')[1]
    println "Pulling image ${imageName} with tag ${imageTag}\nfrom registry ${registry}"
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>